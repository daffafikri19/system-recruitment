// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum question_type {
  text
  image
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          role      @default(peserta)
  profession    String
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  answers       Answer[]
}

enum role {
  superadmin
  admin
  peserta
  karyawan
  tamu
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model question_banks {
  id       String        @id @unique @default(cuid())
  question String        @db.LongText
  type     question_type @default(text)
  category String
  required Boolean

  createdBy String?  @unique
  answer    Answer[]
  createdAt String
  updatedAt String
}

model Answer {
  id         String         @id @default(cuid())
  user       User           @relation(fields: [userId], references: [id])
  userAnswer String
  userId     String         @unique
  questionId String         @unique
  question   question_banks @relation(fields: [questionId], references: [id])
  createdAt  String
  updatedAt  String
}
